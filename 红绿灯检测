#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;

Mat green(Mat img) {
    Mat hsv;
    cvtColor(img, hsv, COLOR_BGR2HSV);
    Scalar lower_green(50, 110, 110);//判定绿色最低值（hsv参数）
    Scalar upper_green(80, 255, 255);//最高值

    Mat mask;   //定义掩膜
    inRange(hsv, lower_green, upper_green, mask);//输出掩膜  1、输入图像（通常是hsv） 2、3、阈值范围  4、输出图像

    vector<vector<Point>> contours; //是一个二维向量，外层的 vector 存储多个轮廓，每个轮廓是一个 vector<Point>，包含该轮廓上的所有点。

    findContours(mask, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);  //检测轮廓，将轮廓存储在contours数组中，一般参数二是轮廓检索模式，参数三是轮廓逼近方法
    for (const auto& contour : contours) {  //const：表示 contour 是一个常量，意味着在循环体内不能修改 contour 的值。
                                            //auto：编译器会自动推导 contour 的类型。在这里，contour 的类型是 std::vector<cv::Point>, 因为 contours 是一个存储多个轮廓的向量，每个轮廓由多个点构成。
                                            //& ：表示 contour 是一个引用，避免复制整个轮廓的数据，提高性能。使用引用时，可以直接访问原始容器中的元素，而不会占用额外的内存。
        if (contourArea(contour) > 500) {   //排除小的噪点
            Rect boundingBox = boundingRect(contour);  //RECT是一个结构体，包含着一个矩形的信息，boundingBox是他创建的对象，用于存储外接矩形的信息
                                                       //boundingRect用于计算给定轮廓的外接矩形
            rectangle(img, boundingBox, Scalar(0, 255, 0), 2);  //绘制矩形的具体参数  1、矩形将被绘制在这个图上  2、外接矩形  3、颜色  4、线条厚度
           
            //sec记录绘制出的矩形的四个拐点的信息
            Point2f src[] = { Point2f(boundingBox.x, boundingBox.y),
                              Point2f(boundingBox.x + boundingBox.width, boundingBox.y),
                              Point2f(boundingBox.x + boundingBox.width, boundingBox.y + boundingBox.height),
                              Point2f(boundingBox.x, boundingBox.y + boundingBox.height) };

            //dst表示透视变换后的图形的坐标
            Point2f dst[] = { Point2f(0, 0), Point2f(300, 0), Point2f(300, 301), Point2f(0, 301) };
            Mat M = getPerspectiveTransform(src, dst);  //计算透视变换，M是透视变换矩阵
            Mat warped;
            warpPerspective(img, warped, M, Size(300, 301));  //绘制透视变换后的图像
            Mat board = warped;
            int h = board.rows;
            int w = board.cols;
            int height = h / 7;
            int width = w / 7;  //分块
            Mat roi = warped(Range(3 * height, 4 * height), Range(3 * width, 4 * width));
            Scalar average_color = mean(roi);  //计算平均颜色
            int r = static_cast<int>(average_color[2]);
            int g = static_cast<int>(average_color[1]);
            int b = static_cast<int>(average_color[0]);
            float color = (r + g + b) / 3.0;
            if (color > 180) {
                string text = "green";  //文本内容
                int font = FONT_HERSHEY_SIMPLEX;  //字体
                double font_scale = 1;
                Scalar font_color(255, 0, 0);
                int thickness = 2;
                int baseline = 0;
                Size text_size = getTextSize(text, font, font_scale, thickness, &baseline);
                int x = 10;
                int y = text_size.height + 10;
                putText(img, text, Point(x, y), font, font_scale, font_color, thickness);
            }
        }
    }
    return img;
}

Mat red(Mat img) {
    Mat hsv;
    cvtColor(img, hsv, COLOR_BGR2HSV);
    Scalar lower_red1(0, 180, 180);
    Scalar upper_red1(10, 255, 255);
    Scalar lower_red2(160, 180, 180);
    Scalar upper_red2(180, 255, 255);
    Mat mask1, mask2, mask;
    inRange(hsv, lower_red1, upper_red1, mask1);
    inRange(hsv, lower_red2, upper_red2, mask2);
    mask = mask1 | mask2;

    vector<vector<Point>> contours;
    findContours(mask, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);
    for (const auto& contour : contours) {
        if (contourArea(contour) > 500) {
            Rect boundingBox = boundingRect(contour);
            rectangle(img, boundingBox, Scalar(0, 0, 255), 2);
            Point2f src[] = { Point2f(boundingBox.x, boundingBox.y),
                              Point2f(boundingBox.x + boundingBox.width, boundingBox.y),
                              Point2f(boundingBox.x + boundingBox.width, boundingBox.y + boundingBox.height),
                              Point2f(boundingBox.x, boundingBox.y + boundingBox.height) };
            Point2f dst[] = { Point2f(0, 0), Point2f(300, 0), Point2f(300, 301), Point2f(0, 301) };
            Mat M = getPerspectiveTransform(src, dst);
            Mat warped;
            warpPerspective(img, warped, M, Size(300, 301));
            Mat board = warped;
            int h = board.rows;
            int w = board.cols;
            int height = h / 7;
            int width = w / 7;
            Mat roi = warped(Range(3 * height, 4 * height), Range(3 * width, 4 * width));
            Scalar average_color = mean(roi);
            int r = static_cast<int>(average_color[2]);
            int g = static_cast<int>(average_color[1]);
            int b = static_cast<int>(average_color[0]);
            float color = (r + g + b) / 3.0;
            if (color > 180) {
                string text = "red";
                int font = FONT_HERSHEY_SIMPLEX;
                double font_scale = 1;
                Scalar font_color(255, 0, 0);
                int thickness = 2;
                int baseline = 0;
                Size text_size = getTextSize(text, font, font_scale, thickness, &baseline);
                int x = 10;
                int y = text_size.height + 100;
                putText(img, text, Point(x, y), font, font_scale, font_color, thickness);
            }
        }
    }
    return img;
}

Mat yellow(Mat img) {
    Mat hsv;
    cvtColor(img, hsv, COLOR_BGR2HSV);
    Scalar lower_yellow(5, 90, 90);
    Scalar upper_yellow(25, 255, 255);
    Mat mask;
    inRange(hsv, lower_yellow, upper_yellow, mask);

    Mat kernel = getStructuringElement(MORPH_RECT, Size(5, 5));  //创建结构元素，用于后续的形态学操作
    Mat dilated;
    dilate(mask, dilated, kernel, Point(-1, -1), 9);  //膨胀
    Mat opened;
    morphologyEx(dilated, opened, MORPH_OPEN, kernel);  //开运算

    vector<vector<Point>> contours;
    findContours(mask, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);
    for (const auto& contour : contours) {
        double area = contourArea(contour);
        if (area > 1200 && area < 5000) {
            Rect boundingBox = boundingRect(contour);
            rectangle(img, boundingBox, Scalar(70, 200, 200), 2);
            Point2f src[] = { Point2f(boundingBox.x, boundingBox.y),
                              Point2f(boundingBox.x + boundingBox.width, boundingBox.y),
                              Point2f(boundingBox.x + boundingBox.width, boundingBox.y + boundingBox.height),
                              Point2f(boundingBox.x, boundingBox.y + boundingBox.height) };
            Point2f dst[] = { Point2f(0, 0), Point2f(300, 0), Point2f(300, 301), Point2f(0, 301) };
            Mat M = getPerspectiveTransform(src, dst);
            Mat warped;
            warpPerspective(img, warped, M, Size(300, 301));
            Mat board = warped;
            int h = board.rows;
            int w = board.cols;
            int height = h / 5;
            int width = w / 5;
            Mat roi = warped(Range(2 * height, 3 * height), Range(2 * width, 3 * width));
            Scalar average_color = mean(roi);
            int r = static_cast<int>(average_color[2]);
            int g = static_cast<int>(average_color[1]);
            int b = static_cast<int>(average_color[0]);
            float color = (r + g + b) / 3.0;
            if (color > 195) {
                string text = "yellow";
                int font = FONT_HERSHEY_SIMPLEX;
                double font_scale = 1;
                Scalar font_color(255, 0, 0);
                int thickness = 2;
                int baseline = 0;
                Size text_size = getTextSize(text, font, font_scale, thickness, &baseline);
                int x = 10;
                int y = text_size.height + 200;
                putText(img, text, Point(x, y), font, font_scale, font_color, thickness);
            }
        }
    }
    return img;
}

int main() {
    // 打开默认摄像头（索引为0）
    VideoCapture cap(0);
    if (!cap.isOpened()) {
        cerr << "Error: Could not open camera." << endl;
        return -1;
    }

    Mat frame;
    while (true) {
        // 捕获每一帧
        cap >> frame;

        // 检查帧是否有效
        if (frame.empty()) {
            cerr << "Error: Could not grab a frame." << endl;
            break;
        }

        // 调用颜色检测函数
        frame = green(frame);
        frame = red(frame);
        frame = yellow(frame);

        // 显示处理后的帧
        imshow("Color Detection", frame);

        // 按 'q' 键退出
        if (waitKey(30) >= 0) {
            break;
        }
    }

    // 释放摄像头并关闭所有窗口
    cap.release();
    destroyAllWindows();

    return 0;
}
